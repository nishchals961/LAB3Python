# -*- coding: utf-8 -*-
"""Supervised Learning - Lab Problem Statement.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1edxACRtNuuZ1oo2cpI1-vd_uJQf-QWu-

## Learning Outcomes
- Exploratory data analysis & preparing the data for model building.
- Machine Learning - Supervised Learning Classification
  - Logistic Regression
  - Naive bayes Classifier
  - KNN Classifier
  - Decision Tree Classifier
  - Random Forest Classifier
  - Ensemble methods
- Training and making predictions using different classification models.
- Model evaluation

## Objective:
- The Classification goal is to predict “heart disease” in a person with regards to different factors given.

## Context:
- Heart disease is one of the leading causes of death for people of most races in the US. At least 1 of 3 key risk factors for heart disease: high blood pressure, high cholesterol, and smoking.
- Detecting and preventing the factors that have the greatest impact on heart disease is very important in healthcare. Machine learning methods may detect "patterns" from the data and can predict whether a patient is suffering from any heart disease or not..

## Dataset Information

#### Source: https://www.kaggle.com/datasets/kamilpytlak/personal-key-indicators-of-heart-disease?datasetId=1936563&sortBy=voteCount
Originally, the dataset come from the CDC and is a major part of the Behavioral Risk Factor Surveillance System (BRFSS), which conducts annual telephone surveys to gather data on the health status of U.S. residents.

This dataset consists of eighteen columns
- HeartDisease: Respondents that have ever reported having coronary heart disease (CHD) or myocardial infarction (MI)
- BMI: Body Mass Index (BMI)
- Smoking: smoked at least 100 cigarettes in your entire life
- AlcoholDrinking: Heavy drinkers (adult men having more than 14 drinks per week and adult women having more than 7 drinks per week
- Stroke:Ever had a stroke?
- PhysicalHealth: physical health, which includes physical illness and injury
- MentalHealth: for how many days during the past 30 days was your mental health not good?
- DiffWalking: Do you have serious difficulty walking or climbing stairs?
- Sex: male or female?
- AgeCategory: Fourteen-level age category
- Race: Imputed race/ethnicity value
- Diabetic: diabetes?
- PhysicalActivity: Adults who reported doing physical activity or exercise during the past 30 days other than their regular job
- GenHealth: Would you say that in general your health is good, fine or excellent?
- SleepTime: On average, how many hours of sleep do you get in a 24-hour period?
- Asthma: you had asthma?
- KidneyDisease: Not including kidney stones, bladder infection or incontinence, were you ever told you had kidney disease?
- SkinCancer: Ever had skin cancer?

### 1. Importing Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier
from sklearn.ensemble import StackingClassifier
from sklearn.metrics import accuracy_score

"""### 2. Load the dataset and display a sample of five rows of the data frame."""

# Load the dataset
file_path = extraction_path + 'heart_2020_cleaned.csv'
df = pd.read_csv(file_path)

# Display a sample of five rows
df.sample(5)

"""### 3. Check the shape of the data (number of rows and columns). Check the general information about the dataframe using the .info() method."""

# Check the shape of the data
shape = df.shape

# Check general information about the dataframe
info = df.info()

shape, info

"""### 4. Check the statistical summary of the dataset and write your inferences."""

# Check the statistical summary of the dataset
summary = df.describe(include='all')
summary
# Check the statistical summary of the dataset
summary = df.describe(include='all')
print(summary)

"""### 5. Check the percentage of missing values in each column of the data frame. Drop the missing values if there are any."""

# Check the percentage of missing values in each column
missing_values = df.isnull().mean() * 100
print(missing_values)

# Drop the missing values if there are any
df = df.dropna()

"""### 6. Check if there are any duplicate rows. If any drop them and check the shape of the dataframe after dropping duplicates."""

# Check for duplicate rows
duplicates = df.duplicated().sum()
print(f"Number of duplicate rows: {duplicates}")

# Drop duplicate rows
df = df.drop_duplicates()

# Check the shape of the dataframe after dropping duplicates
print(df.shape)

"""### 7. Check the distribution of the target variable (i.e. 'HeartDisease') and write your observations."""

# Check the distribution of the target variable
distribution = df['HeartDisease'].value_counts(normalize=True) * 100
print(distribution)

"""### 8. Visualize the distribution of the target column 'Heart disease' with respect to various categorical features and write your observations."""

import seaborn as sns
import matplotlib.pyplot as plt

# Visualize distribution
categorical_features = ['Smoking', 'AlcoholDrinking', 'Stroke', 'DiffWalking', 'Sex', 'AgeCategory', 'Race', 'Diabetic', 'PhysicalActivity', 'GenHealth', 'Asthma', 'KidneyDisease', 'SkinCancer']

for feature in categorical_features:
    plt.figure(figsize=(10, 5))
    sns.countplot(x=feature, hue='HeartDisease', data=df)
    plt.title(f'Distribution of HeartDisease with respect to {feature}')
    plt.show()

"""### 9. Check the unique categories in the column 'Diabetic'. Replace 'Yes (during pregnancy)' as 'Yes' and 'No, borderline diabetes' as 'No'."""

# Check unique categories in 'Diabetic'
unique_categories = df['Diabetic'].unique()
print(unique_categories)

# Replace specific categories
df['Diabetic'] = df['Diabetic'].replace({'Yes (during pregnancy)': 'Yes', 'No, borderline diabetes': 'No'})

"""### 10. For the target column 'HeartDiease', Replace 'No' as 0 and 'Yes' as 1."""

# Replace 'No' with 0 and 'Yes' with 1
df['HeartDisease'] = df['HeartDisease'].replace({'No': 0, 'Yes': 1})

"""### 11. Label Encode the columns "AgeCategory", "Race", and "GenHealth". Encode the rest of the columns using dummy encoding approach."""

from sklearn.preprocessing import LabelEncoder

# Label encode specific columns
label_cols = ['AgeCategory', 'Race', 'GenHealth']
le = LabelEncoder()

for col in label_cols:
    df[col] = le.fit_transform(df[col])

# Dummy encode the rest of the categorical columns
df = pd.get_dummies(df, drop_first=True)

"""### 12. Store the target column (i.e.'HeartDisease') in the y variable and the rest of the columns in the X variable."""

# Define the target variable and feature variables
y = df['HeartDisease']
X = df.drop('HeartDisease', axis=1)

"""### 13. Split the dataset into two parts (i.e. 70% train and 30% test) and print the shape of the train and test data"""

from sklearn.model_selection import train_test_split

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Print the shape of the train and test data
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

"""### 14. Standardize the numerical columns using Standard Scalar approach for both train and test data."""

from sklearn.preprocessing import StandardScaler

# Standardize numerical columns
scaler = StandardScaler()
numerical_cols = ['BMI', 'PhysicalHealth', 'MentalHealth', 'SleepTime']

X_train[numerical_cols] = scaler.fit_transform(X_train[numerical_cols])
X_test[numerical_cols] = scaler.transform(X_test[numerical_cols])

"""### 15. Write a function.
- i) Which can take the model and data as inputs.
- ii) Fits the model with the train data.
- iii) Makes predictions on the test set.
- iv) Returns the Accuracy Score.
"""

def train_and_evaluate_model(model, X_train, y_train, X_test, y_test):
    # Fit the model with the train data
    model.fit(X_train, y_train)

    # Make predictions on the test set
    y_pred = model.predict(X_test)

    # Calculate accuracy score
    accuracy = accuracy_score(y_test, y_pred)

    return accuracy

"""### 16. Use the function and train a Logistic regression, KNN, Naive Bayes, Decision tree, Random Forest, Adaboost, GradientBoost, and Stacked Classifier models and make predictions on test data and evaluate the models, compare and write your conclusions and steps to be taken in future in order to improve the accuracy of the model."""

# Define models
models = {
    'Logistic Regression': LogisticRegression(),
    'KNN': KNeighborsClassifier(),
    'Naive Bayes': GaussianNB(),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'AdaBoost': AdaBoostClassifier(),
    'Gradient Boosting': GradientBoostingClassifier()
}

# Train and evaluate models
for model_name, model in models.items():
    accuracy = train_and_evaluate_model(model, X_train, y_train, X_test, y_test)
    print(f"{model_name} Accuracy: {accuracy}")

"""### Conclusion"""



"""----
## Happy Learning:)
----
"""